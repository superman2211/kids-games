{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { Rectangle } from \"./data\";\n\nconst canvas: HTMLCanvasElement = document.getElementById(\"c\") as HTMLCanvasElement;\nconst context = canvas.getContext(\"2d\")!;\nconst dpr = Math.max(Math.min(devicePixelRatio, 2), 1);\nconsole.log(\"dpr\", dpr);\n\nfunction resizeCanvas() {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n    canvas.width = width * dpr;\n    canvas.height = height * dpr;\n\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n}\n\nwindow.addEventListener(\"resize\", resizeCanvas);\n\nresizeCanvas();\n\nconst gameSize = { x: 1000, y: 1000 };\nconst size = { x: 120, y: 120 };\nconst border = 70;\nconst distance = 200;\nconst lineWidth = 10;\nconst rectangeCount = 4;\nconst colors = [\"red\", \"green\", \"blue\", \"yellow\"];\n\nconst rectangles: Array<Rectangle> = [];\n\nconst target: Rectangle = { box: { position: { x: 0, y: 0 }, size }, color: \"\" };\n\nfunction initLevel() {\n    let x = (gameSize.x - rectangeCount * size.x - (rectangeCount - 1) * border) / 2;\n    let y = (gameSize.y - size.y - distance - size.y) / 2;\n\n    for (let i = 0; i < rectangeCount; i++) {\n        rectangles[i] = { box: { position: { x, y }, size }, color: colors[i] };\n\n        x += size.x + border;\n    }\n\n    target.box.position.x = (gameSize.x - size.x) / 2;\n    target.box.position.y = y + size.y + distance;\n    target.color = colors[0];\n}\n\ninitLevel();\n\nconst pointer = {\n    position: { x: 0, y: 0 },\n    pressed: false,\n    pressed_changed: false\n}\n\nconst dragPosition = { x: 0, y: 0 };\nlet dragStarted = false;\n\ncanvas.addEventListener(\"mousedown\", (e) => {\n    pointer.position.x = e.clientX * dpr;\n    pointer.position.y = e.clientY * dpr;\n    pointer.pressed = true;\n    pointer.pressed_changed = true;\n\n    e.preventDefault();\n});\n\ncanvas.addEventListener(\"mousemove\", (e) => {\n    pointer.position.x = e.clientX * dpr;\n    pointer.position.y = e.clientY * dpr;\n    pointer.pressed_changed = false;\n\n    e.preventDefault();\n});\n\ncanvas.addEventListener(\"mouseup\", (e) => {\n    pointer.position.x = e.clientX * dpr;\n    pointer.position.y = e.clientY * dpr;\n    pointer.pressed = false;\n    pointer.pressed_changed = true;\n\n    e.preventDefault();\n});\n\ncanvas.addEventListener(\"mouseleave\", (e) => {\n    pointer.position.x = e.clientX * dpr;\n    pointer.position.y = e.clientY * dpr;\n    pointer.pressed = false;\n    pointer.pressed_changed = true;\n\n    e.preventDefault();\n});\n\ncanvas.addEventListener(\"touchstart\", (e) => {\n    let touch = e.touches[0];\n\n    pointer.position.x = touch.clientX * dpr;\n    pointer.position.y = touch.clientY * dpr;\n    pointer.pressed = true;\n    pointer.pressed_changed = true;\n\n    e.preventDefault();\n});\n\ncanvas.addEventListener(\"touchmove\", (e) => {\n    let touch = e.touches[0];\n\n    pointer.position.x = touch.clientX * dpr;\n    pointer.position.y = touch.clientY * dpr;\n    pointer.pressed_changed = false;\n\n    e.preventDefault();\n});\n\ncanvas.addEventListener(\"touchend\", (e) => {\n    pointer.pressed = false;\n    pointer.pressed_changed = true;\n\n    e.preventDefault();\n});\n\nfunction update() {\n    context.resetTransform();\n    context.clearRect(0, 0, canvas.width, canvas.height);\n\n    const scaleX = canvas.width / gameSize.x;\n    const scaleY = canvas.height / gameSize.y;\n    const scale = Math.min(scaleX, scaleY);\n\n    const tx = (canvas.width - gameSize.x * scale) / 2;\n    const ty = (canvas.height - gameSize.y * scale) / 2;\n\n    context.setTransform(scale, 0, 0, scale, tx, ty);\n\n    const localPointer = {\n        x: (pointer.position.x - tx) / scale,\n        y: (pointer.position.y - ty) / scale,\n    }\n\n    for (const rectangle of rectangles) {\n        context.strokeStyle = rectangle.color;\n        context.lineWidth = lineWidth;\n\n        context.strokeRect(\n            rectangle.box.position.x,\n            rectangle.box.position.y,\n            rectangle.box.size.x,\n            rectangle.box.size.y\n        );\n    }\n\n    context.fillStyle = target.color;\n    context.fillRect(\n        target.box.position.x,\n        target.box.position.y,\n        target.box.size.x,\n        target.box.size.y\n    );\n\n    context.strokeStyle = target.color;\n    context.lineWidth = lineWidth;\n    context.strokeRect(\n        target.box.position.x,\n        target.box.position.y,\n        target.box.size.x,\n        target.box.size.y\n    );\n\n    // console.log(\"dragStarted\", dragStarted, \"pressed\", pointer.pressed, \"pressed_changed\", pointer.pressed_changed);\n\n    if (dragStarted) {\n        if (pointer.pressed) {\n            let deltaX = localPointer.x - dragPosition.x;\n            let deltaY = localPointer.y - dragPosition.y;\n\n            target.box.position.x += deltaX;\n            target.box.position.y += deltaY;\n\n            dragPosition.x = localPointer.x;\n            dragPosition.y = localPointer.y;\n        } else {\n            dragStarted = false;\n\n            console.log(\"drag end\");\n        }\n    } else {\n        if (pointer.pressed && pointer.pressed_changed) {\n            if (target.box.position.x < localPointer.x && localPointer.x < target.box.position.x + target.box.size.x &&\n                target.box.position.y < localPointer.y && localPointer.y < target.box.position.y + target.box.size.y\n            ) {\n                dragStarted = true;\n\n                dragPosition.x = localPointer.x;\n                dragPosition.y = localPointer.y;\n\n                console.log(\"drag start\");\n            }\n        }\n    }\n\n    context.fillStyle = \"white\";\n    context.fillRect(\n        localPointer.x - 15,\n        localPointer.y - 15,\n        30, 30\n    );\n\n    requestAnimationFrame(update);\n}\n\nrequestAnimationFrame(update);"],
  "mappings": "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",
  "names": ["canvas", "context", "dpr", "resizeCanvas", "width", "height", "gameSize", "size", "border", "distance", "lineWidth", "rectangeCount", "colors", "rectangles", "target", "initLevel", "x", "y", "i", "pointer", "dragPosition", "dragStarted", "touch", "update", "scaleX", "scaleY", "scale", "tx", "ty", "localPointer", "rectangle", "deltaX", "deltaY"]
}
