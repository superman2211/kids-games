{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["const canvas: HTMLCanvasElement = document.getElementById(\"c\") as HTMLCanvasElement;\nconst context = canvas.getContext(\"2d\")!;\n\nfunction resizeCanvas() {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n    canvas.width = width * devicePixelRatio;\n    canvas.height = height * devicePixelRatio;\n\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n}\n\nwindow.addEventListener(\"resize\", resizeCanvas);\n\nresizeCanvas();\n\nconst gameSize = { x: 1000, y: 1000 };\nconst size = { x: 120, y: 120 };\nconst border = 70;\nconst distance = 200;\nconst lineWidth = 10;\n\nconst rectangles = [\n    { color: \"red\" },\n    { color: \"blue\" },\n    { color: \"yellow\" },\n    { color: \"green\" },\n];\n\nconst target = { color: \"yellow\" };\n\nfunction update() {\n    // 1, 0, 0\n    // 0, 1, 0\n    // 0, 0, 1\n    context.setTransform(1, 0, 0, 1, 0, 0);\n    context.clearRect(0, 0, canvas.width, canvas.height);\n\n    const scaleX = canvas.width / gameSize.x;\n    const scaleY = canvas.height / gameSize.y;\n    const scale = Math.min(scaleX, scaleY);\n\n    const tx = (canvas.width - gameSize.x * scale) / 2;\n    const ty = (canvas.height - gameSize.y * scale) / 2;\n\n    context.setTransform(scale, 0, 0, scale, tx, ty);\n\n    let position = {\n        x: (gameSize.x - rectangles.length * size.x - (rectangles.length - 1) * border) / 2,\n        y: (gameSize.y - size.y - distance - size.y) / 2,\n    };\n\n    for (const rectangle of rectangles) {\n        context.strokeStyle = rectangle.color;\n        context.lineWidth = lineWidth;\n\n        context.strokeRect(\n            position.x,\n            position.y,\n            size.x,\n            size.y\n        );\n\n        position.x += size.x + border;\n    }\n\n    let targetPosition = {\n        x: (gameSize.x - size.x) / 2, \n        y: position.y + size.y + distance,\n    }\n\n    context.fillStyle = target.color;\n    context.fillRect(\n        targetPosition.x,\n        targetPosition.y,\n        size.x,\n        size.y\n    );\n\n    context.strokeStyle = target.color;\n    context.lineWidth = lineWidth;\n    context.strokeRect(\n        targetPosition.x,\n        targetPosition.y,\n        size.x,\n        size.y\n    );\n\n    requestAnimationFrame(update);\n}\n\nrequestAnimationFrame(update);"],
  "mappings": "mBAAA,IAAMA,EAA4B,SAAS,eAAe,GAAG,EACvDC,EAAUD,EAAO,WAAW,IAAI,EAEtC,SAASE,GAAY,CACjB,IAAMC,EAAQ,OAAO,WACfC,EAAS,OAAO,YAEtBJ,EAAO,MAAQG,EAAQ,iBACvBH,EAAO,OAASI,EAAS,iBAEzBJ,EAAO,MAAM,MAAQ,GAAGG,CAAK,KAC7BH,EAAO,MAAM,OAAS,GAAGI,CAAM,IACnC,CAEA,OAAO,iBAAiB,SAAUF,CAAY,EAE9CA,EAAY,EAEZ,IAAMG,EAAW,CAAE,EAAG,IAAM,EAAG,GAAI,EAC7BC,EAAO,CAAE,EAAG,IAAK,EAAG,GAAG,EACvBC,EAAS,GACTC,EAAW,IACXC,EAAY,GAEZC,EAAa,CACf,CAAE,MAAO,KAAK,EACd,CAAE,MAAO,MAAM,EACf,CAAE,MAAO,QAAQ,EACjB,CAAE,MAAO,OAAO,GAGdC,EAAS,CAAE,MAAO,QAAQ,EAEhC,SAASC,GAAM,CAIXX,EAAQ,aAAa,EAAG,EAAG,EAAG,EAAG,EAAG,CAAC,EACrCA,EAAQ,UAAU,EAAG,EAAGD,EAAO,MAAOA,EAAO,MAAM,EAEnD,IAAMa,EAASb,EAAO,MAAQK,EAAS,EACjCS,EAASd,EAAO,OAASK,EAAS,EAClCU,EAAQ,KAAK,IAAIF,EAAQC,CAAM,EAE/BE,GAAMhB,EAAO,MAAQK,EAAS,EAAIU,GAAS,EAC3CE,GAAMjB,EAAO,OAASK,EAAS,EAAIU,GAAS,EAElDd,EAAQ,aAAac,EAAO,EAAG,EAAGA,EAAOC,EAAIC,CAAE,EAE/C,IAAIC,EAAW,CACX,GAAIb,EAAS,EAAIK,EAAW,OAASJ,EAAK,GAAKI,EAAW,OAAS,GAAKH,GAAU,EAClF,GAAIF,EAAS,EAAIC,EAAK,EAAIE,EAAWF,EAAK,GAAK,GAGnD,QAAWa,KAAaT,EACpBT,EAAQ,YAAckB,EAAU,MAChClB,EAAQ,UAAYQ,EAEpBR,EAAQ,WACJiB,EAAS,EACTA,EAAS,EACTZ,EAAK,EACLA,EAAK,CAAC,EAGVY,EAAS,GAAKZ,EAAK,EAAIC,EAG3B,IAAIa,EAAiB,CACjB,GAAIf,EAAS,EAAIC,EAAK,GAAK,EAC3B,EAAGY,EAAS,EAAIZ,EAAK,EAAIE,GAG7BP,EAAQ,UAAYU,EAAO,MAC3BV,EAAQ,SACJmB,EAAe,EACfA,EAAe,EACfd,EAAK,EACLA,EAAK,CAAC,EAGVL,EAAQ,YAAcU,EAAO,MAC7BV,EAAQ,UAAYQ,EACpBR,EAAQ,WACJmB,EAAe,EACfA,EAAe,EACfd,EAAK,EACLA,EAAK,CAAC,EAGV,sBAAsBM,CAAM,CAChC,CAEA,sBAAsBA,CAAM",
  "names": ["canvas", "context", "resizeCanvas", "width", "height", "gameSize", "size", "border", "distance", "lineWidth", "rectangles", "target", "update", "scaleX", "scaleY", "scale", "tx", "ty", "position", "rectangle", "targetPosition"]
}
